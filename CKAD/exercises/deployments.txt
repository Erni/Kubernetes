alias k=kubectl

# Create a deployment with image nginx:1.18.0, called nginx, having 2 replicas,
# defining port 80 as the port that this container exposes (don't create a service for this deployment)
k create deployment nginx --image=nginx:1.18.0 --dry-run=client -o yaml
##############################
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx:1.18.0
        name: nginx
        ports:
        - containerPort: 80
##############################

# View the YAML of this deployment
k get deployment nginx -o yaml

# View the YAML of the replica set that was created by this deployment
k get replicasets
k get replicaset RS_NAME -o yaml

# Get the YAML for one of the pods
k get pods
k get pod POD_NAME -o yaml

# Check how the deployment rollout is going
k rollout status deployment nginx

# Update the nginx image to nginx:1.19.8
k edit deploy nginx

# Check the rollout history and confirm that the replicas are OK
k rollout history deploy nginx
k get deploy nginx
k get rs # check that a new replica set has been created
k get pods

# Undo the latest rollout and verify that new pods have the old image (nginx:1.18.0)
k rollout status deployment nginx
k get pods -o wide
k describe pod POD_NAME | grep image

# Do an on purpose update of the deployment with a wrong image nginx:1.91
k edit deploy nginx

# Verify that something's wrong with the rollout
k get pods
k describe pod POD_NAME
k rollout status deployment nginx

# Return the deployment to the second revision (number 2) and verify the image is nginx:1.19.8
k rollout undo deployment nginx --to-revision=2
k rollout status deployment nginx 
k describe deployments.apps nginx | grep -i image

# Check the details of the fourth revision (number 4)
k rollout history deploy nginx --revision=4 # You'll also see the wrong image displayed here

# Scale the deployment to 5 replicas
k edit deployment nginx
k scale deploy nginx --replicas=5

# Autoscale the deployment, pods between 5 and 10, targetting CPU utilization at 80%
k autoscale deployment nginx --min=5 --max=10 --cpu-percent=80

# Pause the rollout of the deployment
k rollout pause deployment nginx

# Update the image to nginx:1.19.9 and check that there's nothing going on, since we paused the rollout
k edit deploy nginx
k rollout history deploy nginx

# Resume the rollout and check that the nginx:1.19.9 image has been applied
k rollout resume deployment nginx

# Delete the deployment and the horizontal pod autoscaler you created
k delete deployment nginx
k delete horizontalpodautoscalers.autoscaling nginx

# Implement canary deployment by running two instances of nginx marked as version=v1 and version=v2 so that the load is balanced at 75%-25% ratio
# we would deploy 2 different deployments, 1 with 1 replia and the other with 2 replicas, and a service that matches both deployments